name: tf-snowflake

on:
  push:
    branches:
    - 'master'
    - 'staging'
  pull_request:
    branches:
    - master
    - staging
    # Add ready_for_review so checks auto run when converted from draft PR.
    types: [ready_for_review, opened, synchronize, reopened]



jobs:
  setup:
    name: Setup - cancel previous runs, run file filters, and extract branch name
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    runs-on: ubuntu-20.04
    outputs:
      filter_orchestration: ${{ steps.filter.outputs.orchestration }}
      filter_singer: ${{ steps.filter.outputs.singer }}
      filter_terraform: ${{ steps.filter.outputs.terraform }}
      branch: ${{ steps.output_branch_name.outputs.branch }}
      gcp_project: ${{ steps.output_gcp_project.outputs.gcp_project }}

    steps:

      # We are billed for actions runtime, and if a new commit is pushed we
      # might as well cancel this current workflow as the another run will need
      # to happen regardless.
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}

      - uses: actions/checkout@v2

      # Extract branch name on push
      - name: Extract branch name
        if: github.event_name == 'push'
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

      # Extract branch name on pull request
      - name: Extract branch name (PR)
        if: github.event_name == 'pull_request'
        run: echo "branch=$(echo ${GITHUB_BASE_REF#refs/heads/})" >> $GITHUB_ENV

        # Output branch name so we can pass it to other jobs
      - name: Output branch name
        id: output_branch_name
        run: echo "::set-output name=branch::${{ env.branch }}"


  deploy:
    runs-on: ubuntu-20.04
    needs:
      - setup
    if: (github.event_name == 'push' || github.event.pull_request.draft == false)
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set terraform version output
        id: tf_version
        run: echo "::set-output name=tf_version::$(tr -d '\n' < .terraform-version)"
        working-directory: ${{ github.workspace }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ steps.tf_version.outputs.tf_version }}

      # select tfstate bucket based on branch
      - name: Terraform init
        run: terraform init

      # Terraform plan
      # get project_id from <branch>.tfvars file
      - id: plan
        run: |
          terraform plan \
            -no-color \
            -input=false \
            -var "SNOWFLAKE_provider_username=${{ secrets.TERRAFORM_SNOWFLAKE_USERNAME }}" \
            -var "SNOWFLAKE_provider_password=${{ secrets.TERRAFORM_SNOWFLAKE_PASSWORD }}" \
            -out tfplan

      - name: Output TF plan to PR comment
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          PLAN_master_only: "terraform\n${{ steps.plan_master_only.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            <details><summary>Show Plan - Snowflake (master)</summary>

            \`\`\`${process.env.PLAN_master_only}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # only apply on push to staging/master branch
      - name: Terraform apply
        run: terraform apply -input=false tfplan
        if: github.event_name == 'push'
